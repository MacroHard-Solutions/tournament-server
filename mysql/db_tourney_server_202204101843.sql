--
-- Script was generated by Devart dbForge Studio 2020 for MySQL, Version 9.0.791.0
-- Product home page: http://www.devart.com/dbforge/mysql/studio
-- Script date 2022/04/10 18:43:24
-- Server version: 8.0.27
-- Client version: 4.1
--


-- 
-- Set character set the client will use to send SQL statements to the server
--
SET NAMES 'utf8';

--
-- Set default database
--
USE db_tourney_server;

--
-- Drop function `decrypt_data`
--
DROP FUNCTION IF EXISTS decrypt_data;

--
-- Drop function `encrypt_data`
--
DROP FUNCTION IF EXISTS encrypt_data;

--
-- Drop procedure `check_existing_user`
--
DROP PROCEDURE IF EXISTS check_existing_user;

--
-- Drop procedure `delete_query`
--
DROP PROCEDURE IF EXISTS delete_query;

--
-- Drop procedure `execute_statement`
--
DROP PROCEDURE IF EXISTS execute_statement;

--
-- Drop procedure `login_user_check`
--
DROP PROCEDURE IF EXISTS login_user_check;

--
-- Drop procedure `update_query`
--
DROP PROCEDURE IF EXISTS update_query;

--
-- Drop procedure `get_latest_address_id`
--
DROP PROCEDURE IF EXISTS get_latest_address_id;

--
-- Drop procedure `get_latest_agent_id`
--
DROP PROCEDURE IF EXISTS get_latest_agent_id;

--
-- Drop procedure `get_latest_game_id`
--
DROP PROCEDURE IF EXISTS get_latest_game_id;

--
-- Drop procedure `get_latest_match_log_id`
--
DROP PROCEDURE IF EXISTS get_latest_match_log_id;

--
-- Drop procedure `get_latest_tournament_id`
--
DROP PROCEDURE IF EXISTS get_latest_tournament_id;

--
-- Drop procedure `get_latest_user_id`
--
DROP PROCEDURE IF EXISTS get_latest_user_id;

--
-- Drop procedure `get_latest_id`
--
DROP PROCEDURE IF EXISTS get_latest_id;

--
-- Drop procedure `insert_ranking`
--
DROP PROCEDURE IF EXISTS insert_ranking;

--
-- Drop table `RANKING`
--
DROP TABLE IF EXISTS RANKING;

--
-- Drop procedure `insert_agent`
--
DROP PROCEDURE IF EXISTS insert_agent;

--
-- Drop table `AGENT`
--
DROP TABLE IF EXISTS AGENT;

--
-- Drop procedure `insert_agent_address`
--
DROP PROCEDURE IF EXISTS insert_agent_address;

--
-- Drop table `ADDRESS`
--
DROP TABLE IF EXISTS ADDRESS;

--
-- Drop table `USER`
--
DROP TABLE IF EXISTS USER;

--
-- Drop procedure `insert_match_log`
--
DROP PROCEDURE IF EXISTS insert_match_log;

--
-- Drop table `MATCH_LOG`
--
DROP TABLE IF EXISTS MATCH_LOG;

--
-- Drop procedure `insert_tournament`
--
DROP PROCEDURE IF EXISTS insert_tournament;

--
-- Drop table `TOURNAMENT`
--
DROP TABLE IF EXISTS TOURNAMENT;

--
-- Drop procedure `insert_game`
--
DROP PROCEDURE IF EXISTS insert_game;

--
-- Drop table `GAME`
--
DROP TABLE IF EXISTS GAME;

--
-- Set default database
--
USE db_tourney_server;

--
-- Create table `GAME`
--
CREATE TABLE IF NOT EXISTS GAME (
  GAME_ID varchar(45) NOT NULL COMMENT 'The UUID of the game',
  GAME_NAME varchar(100) NOT NULL,
  FILE_NAME varchar(100) NOT NULL COMMENT 'Location of the game file, stored in the games directory',
  PRIMARY KEY (GAME_ID)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create index `GAME_ID_UNIQUE` on table `GAME`
--
ALTER TABLE GAME
ADD UNIQUE INDEX GAME_ID_UNIQUE (GAME_ID);

DELIMITER $$

--
-- Create procedure `insert_game`
--
CREATE
DEFINER = 'root'@'%'
PROCEDURE insert_game (IN gameName varchar(100), IN fileName varchar(100))
MODIFIES SQL DATA
BEGIN
  INSERT INTO `GAME` (GAME_ID, GAME_NAME, FILE_NAME)
    VALUES (UUID(), gameName, fileName);
END
$$

DELIMITER ;

--
-- Create table `TOURNAMENT`
--
CREATE TABLE IF NOT EXISTS TOURNAMENT (
  TOURNAMENT_ID varchar(45) NOT NULL COMMENT 'The UUID of the tournament',
  TOURNAMENT_NAME varchar(100) NOT NULL,
  GAME_ID varchar(45) NOT NULL COMMENT 'The UUID of the game this tournament falls under',
  PRIMARY KEY (TOURNAMENT_ID)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create index `TOURNAMENT_ID_UNIQUE` on table `TOURNAMENT`
--
ALTER TABLE TOURNAMENT
ADD UNIQUE INDEX TOURNAMENT_ID_UNIQUE (TOURNAMENT_ID);

--
-- Create index `GAME_ID_idx` on table `TOURNAMENT`
--
ALTER TABLE TOURNAMENT
ADD INDEX GAME_ID_idx (GAME_ID);

--
-- Create foreign key
--
ALTER TABLE TOURNAMENT
ADD CONSTRAINT GAME_ID_TOURNAMENT FOREIGN KEY (GAME_ID)
REFERENCES GAME (GAME_ID) ON DELETE CASCADE ON UPDATE CASCADE;

DELIMITER $$

--
-- Create procedure `insert_tournament`
--
CREATE
DEFINER = 'root'@'%'
PROCEDURE insert_tournament (IN tournamentName varchar(100), IN gameID varchar(45))
MODIFIES SQL DATA
BEGIN
  INSERT INTO `TOURNAMENT` (TOURNAMENT_ID, TOURNAMENT_NAME, GAME_ID)
    VALUES (UUID(), tournamentName, gameID);
END
$$

DELIMITER ;

--
-- Create table `MATCH_LOG`
--
CREATE TABLE IF NOT EXISTS MATCH_LOG (
  MATCH_LOG_ID varchar(45) NOT NULL COMMENT 'THE UUID of the match to be logged from a tournament',
  TOURNAMENT_ID varchar(45) NOT NULL COMMENT 'The UUID of the tournament this match was played in',
  GAME_LOG blob NOT NULL COMMENT 'Details of the match',
  PRIMARY KEY (MATCH_LOG_ID)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create index `MATCH_LOG_ID_UNIQUE` on table `MATCH_LOG`
--
ALTER TABLE MATCH_LOG
ADD UNIQUE INDEX MATCH_LOG_ID_UNIQUE (MATCH_LOG_ID);

--
-- Create index `TOURNAMENT_ID_idx` on table `MATCH_LOG`
--
ALTER TABLE MATCH_LOG
ADD INDEX TOURNAMENT_ID_idx (TOURNAMENT_ID);

--
-- Create foreign key
--
ALTER TABLE MATCH_LOG
ADD CONSTRAINT TOURNAMENT_ID_MATCH_LOG FOREIGN KEY (TOURNAMENT_ID)
REFERENCES TOURNAMENT (TOURNAMENT_ID) ON DELETE CASCADE ON UPDATE CASCADE;

DELIMITER $$

--
-- Create procedure `insert_match_log`
--
CREATE
DEFINER = 'root'@'%'
PROCEDURE insert_match_log (IN tournamentID varchar(45), IN gameLog blob)
MODIFIES SQL DATA
BEGIN
  INSERT INTO `MATCH_LOG` (MATCH_LOG_ID, TOURNAMENT_ID, GAME_LOG)
    VALUES (UUID(), tournamentID, gameLog);
END
$$

DELIMITER ;

--
-- Create table `USER`
--
CREATE TABLE IF NOT EXISTS USER (
  USER_ID varchar(128) NOT NULL COMMENT 'The user''s unique UUID generated each time a new user is registered',
  USER_FNAME varchar(45) NOT NULL,
  USER_LNAME varchar(45) NOT NULL,
  USERNAME varchar(45) NOT NULL COMMENT 'The user''s username',
  USER_EMAIL varchar(45) NOT NULL,
  USER_PASSWD varchar(256) NOT NULL COMMENT 'The user''s password, stored as an SHA-256 hash',
  USER_IS_ADMIN tinyint NOT NULL COMMENT 'Whether the user is a player or administrator',
  USER_NOTIFICATIONS tinyint NOT NULL DEFAULT 0 COMMENT 'Whether the user would like to recieve notifications',
  PRIMARY KEY (USER_ID)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create index `USER_ID_UNIQUE` on table `USER`
--
ALTER TABLE USER
ADD UNIQUE INDEX USER_ID_UNIQUE (USER_ID);

--
-- Create index `USERNAME_UNIQUE` on table `USER`
--
ALTER TABLE USER
ADD UNIQUE INDEX USERNAME_UNIQUE (USERNAME);

--
-- Create table `ADDRESS`
--
CREATE TABLE IF NOT EXISTS ADDRESS (
  ADDRESS_ID varchar(45) NOT NULL COMMENT 'The UUID of an agent''s address',
  ADDRESS_IP varchar(15) NOT NULL COMMENT 'Agent''s IP address',
  ADDRESS_PORT int NOT NULL COMMENT 'Agent''s port #',
  PRIMARY KEY (ADDRESS_ID)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create index `ADDRESS_ID_UNIQUE` on table `ADDRESS`
--
ALTER TABLE ADDRESS
ADD UNIQUE INDEX ADDRESS_ID_UNIQUE (ADDRESS_ID);

DELIMITER $$

--
-- Create procedure `insert_agent_address`
--
CREATE
DEFINER = 'root'@'%'
PROCEDURE insert_agent_address (IN addressIP varchar(15), IN portNum int)
MODIFIES SQL DATA
BEGIN
  INSERT INTO `ADDRESS` (ADDRESS_ID, ADDRESS_IP, ADDRESS_PORT)
    VALUES (UUID(), addressIP, portNum);
END
$$

DELIMITER ;

--
-- Create table `AGENT`
--
CREATE TABLE IF NOT EXISTS AGENT (
  AGENT_ID varchar(45) NOT NULL COMMENT 'UUID of the player''s agent',
  USER_ID varchar(45) NOT NULL COMMENT 'The player''s UUID',
  ADDRESS_ID varchar(45) NOT NULL COMMENT 'The agent''s address UUID',
  TOURNAMENT_ID varchar(45) NOT NULL COMMENT 'The tournament UUID',
  AGENT_ELO float NOT NULL COMMENT 'The ELO rating of the agent',
  PRIMARY KEY (AGENT_ID)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create index `AGENT_ID_UNIQUE` on table `AGENT`
--
ALTER TABLE AGENT
ADD UNIQUE INDEX AGENT_ID_UNIQUE (AGENT_ID);

--
-- Create index `ADDRESS_ID_UNIQUE` on table `AGENT`
--
ALTER TABLE AGENT
ADD UNIQUE INDEX ADDRESS_ID_UNIQUE (ADDRESS_ID);

--
-- Create index `USER_ID_idx` on table `AGENT`
--
ALTER TABLE AGENT
ADD INDEX USER_ID_idx (USER_ID);

--
-- Create index `ADDRESS_ID_idx` on table `AGENT`
--
ALTER TABLE AGENT
ADD INDEX ADDRESS_ID_idx (ADDRESS_ID);

--
-- Create index `TOURNAMENT_ID_idx` on table `AGENT`
--
ALTER TABLE AGENT
ADD INDEX TOURNAMENT_ID_idx (TOURNAMENT_ID);

--
-- Create foreign key
--
ALTER TABLE AGENT
ADD CONSTRAINT ADDRESS_ID_AGENT FOREIGN KEY (ADDRESS_ID)
REFERENCES ADDRESS (ADDRESS_ID) ON DELETE CASCADE ON UPDATE CASCADE;

--
-- Create foreign key
--
ALTER TABLE AGENT
ADD CONSTRAINT TOURNAMENT_ID_AGENT FOREIGN KEY (TOURNAMENT_ID)
REFERENCES TOURNAMENT (TOURNAMENT_ID) ON DELETE CASCADE ON UPDATE CASCADE;

--
-- Create foreign key
--
ALTER TABLE AGENT
ADD CONSTRAINT USER_ID_AGENT FOREIGN KEY (USER_ID)
REFERENCES USER (USER_ID) ON DELETE CASCADE ON UPDATE CASCADE;

DELIMITER $$

--
-- Create procedure `insert_agent`
--
CREATE
DEFINER = 'root'@'%'
PROCEDURE insert_agent (IN userID varchar(45), IN addressID varchar(45), IN tournamentID varchar(45), IN eloRating float)
MODIFIES SQL DATA
BEGIN
  INSERT INTO `AGENT` (AGENT_ID, USER_ID, ADDRESS_ID, TOURNAMENT_ID, AGENT_ELO)
    VALUES (UUID(), userID, addressID, tournamentID, eloRating);
END
$$

DELIMITER ;

--
-- Create table `RANKING`
--
CREATE TABLE IF NOT EXISTS RANKING (
  MATCH_LOG_ID varchar(45) NOT NULL COMMENT 'The UUID of the game played',
  AGENT_ID varchar(45) NOT NULL COMMENT 'The UUID of the player''s agent',
  RANKING int NOT NULL COMMENT 'The agent''s ranking in a match',
  PRIMARY KEY (MATCH_LOG_ID, AGENT_ID)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create index `AGENT_ID_idx` on table `RANKING`
--
ALTER TABLE RANKING
ADD INDEX AGENT_ID_idx (AGENT_ID);

--
-- Create foreign key
--
ALTER TABLE RANKING
ADD CONSTRAINT AGENT_ID_RANKING FOREIGN KEY (AGENT_ID)
REFERENCES AGENT (AGENT_ID) ON DELETE CASCADE ON UPDATE CASCADE;

--
-- Create foreign key
--
ALTER TABLE RANKING
ADD CONSTRAINT MATCH_LOG_ID_RANKING FOREIGN KEY (MATCH_LOG_ID)
REFERENCES MATCH_LOG (MATCH_LOG_ID) ON DELETE CASCADE ON UPDATE CASCADE;

DELIMITER $$

--
-- Create procedure `insert_ranking`
--
CREATE
DEFINER = 'root'@'%'
PROCEDURE insert_ranking (IN matchLogID varchar(45), IN agentID varchar(45), IN ranking int)
MODIFIES SQL DATA
BEGIN
  INSERT INTO `RANKING` (MATCH_LOG_ID, AGENT_ID, `RANK`)
    VALUES (matchLogID, agentID, ranking);
END
$$

--
-- Create procedure `get_latest_id`
--
CREATE
DEFINER = 'root'@'%'
PROCEDURE get_latest_id (IN getStmt text, IN fieldID varchar(45))
BEGIN
  SET @stmt = getStmt;
  SET @offsetVal = LAST_INSERT_ID();
  SET @limitCount = 1;

  PREPARE limitStmt FROM @stmt;
  EXECUTE limitStmt USING @offsetVal, @limitCount;
  DEALLOCATE PREPARE limitStmt;
END
$$

--
-- Create procedure `get_latest_user_id`
--
CREATE
DEFINER = 'root'@'%'
PROCEDURE get_latest_user_id ()
BEGIN
  SET @newIDStmt = 'SELECT * FROM `USER` LIMIT ?,?';
  CALL get_latest_id(@newIDStmt, "USER_ID");
END
$$

--
-- Create procedure `get_latest_tournament_id`
--
CREATE
DEFINER = 'root'@'%'
PROCEDURE get_latest_tournament_id ()
BEGIN
  SET @newIDStmt = 'SELECT * FROM `TOURNAMENT` LIMIT ?,?';
  CALL get_latest_id(@newIDStmt, "TOURNAMENT_ID");
END
$$

--
-- Create procedure `get_latest_match_log_id`
--
CREATE
DEFINER = 'root'@'%'
PROCEDURE get_latest_match_log_id ()
BEGIN
  SET @newIDStmt = 'SELECT * FROM `MATCH_LOG` LIMIT ?,?';
  CALL get_latest_id(@newIDStmt, "MATCH_LOG_ID");
END
$$

--
-- Create procedure `get_latest_game_id`
--
CREATE
DEFINER = 'root'@'%'
PROCEDURE get_latest_game_id ()
BEGIN
  SET @newIDStmt = 'SELECT * FROM `GAME` LIMIT ?,?';
  CALL get_latest_id(@newIDStmt, "GAME_ID");
END
$$

--
-- Create procedure `get_latest_agent_id`
--
CREATE
DEFINER = 'root'@'%'
PROCEDURE get_latest_agent_id ()
BEGIN
  SET @newIDStmt = 'SELECT * FROM `AGENT` LIMIT ?,?';
  CALL get_latest_id(@newIDStmt);
END
$$

--
-- Create procedure `get_latest_address_id`
--
CREATE
DEFINER = 'root'@'%'
PROCEDURE get_latest_address_id ()
BEGIN
  SET @newIDStmt = 'SELECT * FROM `ADDRESS` LIMIT ?,?';
  CALL get_latest_id(@newIDStmt, "ADDRESS_ID");
END
$$

--
-- Create procedure `update_query`
--
CREATE
DEFINER = 'root'@'%'
PROCEDURE update_query (IN tblName varchar(45), IN setValues text, IN whereCondition text)
MODIFIES SQL DATA
BEGIN
  SET @stmt = CONCAT("UPDATE ", tblName, " SET ", setValues, " WHERE ", whereCondition);

  CALL execute_stmt();

END
$$

--
-- Create procedure `login_user_check`
--
CREATE
DEFINER = 'root'@'%'
PROCEDURE login_user_check (IN userName varchar(45), IN userEmail varchar(45), IN userPass text)
BEGIN
  SET @uName = userName;
  SET @uPass = userPass;
  SET @uEmail = userEmail;
  PREPARE loginCheck FROM 'SELECT * FROM `USER` WHERE  (USERNAME = ? AND USER_PASSWD = ?) OR (USER_EMAIL = ? AND USER_PASSWD = ?)';
  EXECUTE loginCheck USING @uName, @uPass, @uEmail, @uPass;
  DEALLOCATE PREPARE loginCheck;
END
$$

--
-- Create procedure `execute_statement`
--
CREATE
DEFINER = 'root'@'%'
PROCEDURE execute_statement ()
MODIFIES SQL DATA
BEGIN
  PREPARE updateQuery FROM @stmt;
  EXECUTE updateQuery;
  DEALLOCATE PREPARE updateQuery;
END
$$

--
-- Create procedure `delete_query`
--
CREATE
DEFINER = 'root'@'%'
PROCEDURE delete_query (IN tblName varchar(45), IN whereCondition text)
MODIFIES SQL DATA
BEGIN
  SET @stmt = CONCAT("DELETE FROM ", tblName, " WHERE ", whereCondition);

  CALL execute_stmt();
END
$$

--
-- Create procedure `check_existing_user`
--
CREATE
DEFINER = 'root'@'%'
PROCEDURE check_existing_user (IN userName varchar(45))
BEGIN
  SET @uName = userName;
  PREPARE existingUserCheck FROM 'SELECT * FROM `USER` WHERE USERNAME = ?';
  EXECUTE existingUserCheck USING @uName;
  DEALLOCATE PREPARE existingUserCheck;
END
$$

--
-- Create function `encrypt_data`
--
CREATE
DEFINER = 'root'@'%'
FUNCTION encrypt_data (currData varchar(100))
RETURNS blob
BEGIN
  -- SET @encrypt_str = AES_ENCRYPT(currData,@key_str,@init_vector);
  RETURN @encrypt_str;
END
$$

--
-- Create function `decrypt_data`
--
CREATE
DEFINER = 'root'@'%'
FUNCTION decrypt_data (encodedData text)
RETURNS blob
BEGIN
  -- SET @decrypt_str = AES_DECRYPT(encodedData,@key_str,@init_vector);
  RETURN @decrypt_str;
END
$$

DELIMITER ;

-- 
-- Dumping data for table GAME
--
-- Table db_tourney_server.GAME does not contain any data (it is empty)

-- 
-- Dumping data for table USER
--
INSERT INTO USER VALUES
('5046abd7-c34c-4b5d-a5d7-d659e2373a68', 'veru', 'nathan', '234', 'wkjeubd@gmail.com', 'hello', 0, 0),
('9a27bf60-a2e8-43f7-bd4f-7a1530df4a91', 'Agnes', 'Veum', 'erferf', 'erfewrf', 'h', 0, 0),
('bec910fd-67e7-4c8d-af05-5f09d695469b', 'veru', 'nathan', '2346333333333333333333333333', 'wkjeubd@gmail.com', 'hello', 0, 0);

-- 
-- Dumping data for table TOURNAMENT
--
-- Table db_tourney_server.TOURNAMENT does not contain any data (it is empty)

-- 
-- Dumping data for table ADDRESS
--
-- Table db_tourney_server.ADDRESS does not contain any data (it is empty)

-- 
-- Dumping data for table MATCH_LOG
--
-- Table db_tourney_server.MATCH_LOG does not contain any data (it is empty)

-- 
-- Dumping data for table AGENT
--
-- Table db_tourney_server.AGENT does not contain any data (it is empty)

-- 
-- Dumping data for table RANKING
--
-- Table db_tourney_server.RANKING does not contain any data (it is empty)